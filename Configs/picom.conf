#################################
#             Shadows           #
#################################

# Enabled client-side shadows on windows. Note desktop windows
# (windows with '_NET_WM_WINDOW_TYPE_DESKTOP') never get shadow,
# unless explicitly requested using the wintypes option.
#
# Can be set per-window using rules.
#
# Default: false
shadow = true;

# The blur radius for shadows, in pixels.
#
# Default: 12
shadow-radius = 30;

# The opacity of shadows.
#
# Range: 0.0 - 1.0
# Default: 0.75
shadow-opacity = .75

# The left offset for shadows, in pixels.
#
# Default: -15
shadow-offset-x = -30;

# The top offset for shadows, in pixels.
#
# Default: -15
shadow-offset-y = -30;

# Hex string color value of shadow. Formatted like "#RRGGBB", e.g. "#C0FFEE".
#
# Default: #000000
# shadow-color = "#000000"

# Crop shadow of a window fully on a particular monitor to that monitor. This is
# currently implemented using the X RandR extension.
#
# Default: false
# crop-shadow-to-monitor = false


#################################
#           Fading              #
#################################

# Fade windows in/out when opening/closing and when opacity changes,
# unless no-fading-openclose is used. Can be set per-window using rules.
#
# Default: false
fading = true;

# Opacity change between steps while fading in. (0.01 - 1.0, defaults to 0.028)
fade-in-step = 0.03;

# Opacity change between steps while fading out. (0.01 - 1.0, defaults to 0.03)
fade-out-step = 0.03;

# The time between steps in fade step, in milliseconds. (> 0, defaults to 10)
fade-delta = 8

# Do not fade on window open/close.
# no-fading-openclose = false

# Do not fade destroyed ARGB windows with WM frame. Workaround of bugs in Openbox, Fluxbox, etc.
# no-fading-destroyed-argb = false


#################################
#   Transparency / Opacity      #
#################################

# Opacity of window titlebars and borders.
#
# Range: 0.1 - 1.0
# Default: 1.0 (disabled)
frame-opacity = 1.0;

# Use fixed inactive dim value, instead of adjusting according to window opacity.
#
# Default: false
# inactive-dim-fixed = true

#################################
#           Corners             #
#################################

# Sets the radius of rounded window corners. When > 0, the compositor will
# round the corners of windows. Does not interact well with
# `transparent-clipping`.
#
# Default: 0 (disabled)
corner-radius = 20

#################################
#            Blur               #
#################################

# Parameters for background blurring, see BLUR section in the man page for more information.
# blur-method =
# blur-size = 12
#
# blur-deviation = false
#
# blur-strength = 5

# Blur background of semi-transparent / ARGB windows.
# Can be set per-window using rules.
#
# Default: false
# blur-background = false

# Blur background of windows when the window frame is not opaque.
# Implies:
#    blur-background
#
# Default: false
# blur-background-frame = false

# Use fixed blur strength rather than adjusting according to window opacity.
#
# Default: false
# blur-background-fixed = false


# Specify the blur convolution kernel, with the following format:
# example:
#   blur-kern = "5,5,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1";
# Can also be a pre-defined kernel, see the man page.
#
# Default: ""
blur-kern = "3x3box";

#################################
#       General Settings        #
#################################

# Enable remote control via D-Bus. See the man page for more details.
#
# Default: false
# dbus = true

# Daemonize process. Fork to background after initialization. Causes issues with certain (badly-written) drivers.
# daemon = false

# Specify the backend to use: `xrender`, `glx`, or `egl`.
#
# Default: "xrender"
backend = "glx"

# Use higher precision during rendering, and apply dither when presenting the
# rendered screen. Reduces banding artifacts, but may cause performance
# degradation. Only works with OpenGL.
dithered-present = false;

# Enable/disable VSync.
#
# Default: false
vsync = true;

# Try to detect windows with rounded corners and don't consider them
# shaped windows. The accuracy is not very high, unfortunately.
#
# Has nothing to do with `corner-radius`.
#
# Default: false
detect-rounded-corners = true;

# Detect '_NET_WM_WINDOW_OPACITY' on client windows, useful for window managers
# not passing '_NET_WM_WINDOW_OPACITY' of client windows to frame windows.
#
# Default: false
detect-client-opacity = true;

# Use EWMH '_NET_ACTIVE_WINDOW' to determine currently focused window,
# rather than listening to 'FocusIn'/'FocusOut' event. May be more accurate,
# provided that the WM supports it.
#
# Default: false
use-ewmh-active-win = true

# Unredirect all windows if a full-screen opaque window is detected,
# to maximize performance for full-screen windows. Known to cause flickering
# when redirecting/unredirecting windows.
#
# Default: false
unredir-if-possible = true

# Delay before unredirecting the window, in milliseconds.
#
# Default: 0.
# unredir-if-possible-delay = 0

# Use 'WM_TRANSIENT_FOR' to group windows, and consider windows
# in the same group focused at the same time.
#
# Default: false
detect-transient = true;

# Use 'WM_CLIENT_LEADER' to group windows, and consider windows in the same
# group focused at the same time. This usually means windows from the same application
# will be considered focused or unfocused at the same time.
# 'WM_TRANSIENT_FOR' has higher priority if detect-transient is enabled, too.
#
# Default: false
# detect-client-leader = false

# Use of damage information for rendering. This cause the only the part of the
# screen that has actually changed to be redrawn, instead of the whole screen
# every time. Should improve performance.
#
# Default: false
use-damage = true;

# Use X Sync fence to wait for the completion of rendering of other windows,
# before using their content to render the current screen.
#
# Required for explicit sync drivers, such as nvidia.
#
# Default: false
# xrender-sync-fence = false

# GLX backend: Use specified GLSL fragment shader for rendering window
# contents. Read the man page for a detailed explanation of the interface.
#
# Can be set per-window using rules.
#
# window-shader-fg = "default"

# Force all windows to be painted with blending. Useful if you
# have a `window-shader-fg` that could turn opaque pixels transparent.
#
# Default: false
# force-win-blend = false

# Do not use EWMH to detect fullscreen windows.
# Reverts to checking if a window is fullscreen based only on its size and coordinates.
#
# Default: false
no-ewmh-fullscreen = false

# Dimming bright windows so their brightness doesn't exceed this set value.
# Brightness of a window is estimated by averaging all pixels in the window,
# so this could comes with a performance hit.
# Setting this to 1.0 disables this behaviour. Requires --use-damage to be disabled.
#
# Default: 1.0 (disabled)
# max-brightness = 1.0

# Make transparent windows clip other windows like non-transparent windows do,
# instead of blending on top of them. e.g. placing a transparent window on top
# of another window will cut a "hole" in that window, and show the desktop background
# underneath.
#
# Default: false
# transparent-clipping = false

# Set the log level. Possible values are:
#  "trace", "debug", "info", "warn", "error"
# in increasing level of importance. Case insensitive.
# If using the "TRACE" log level, it's better to log into a file
# using *--log-file*, since it can generate a huge stream of logs.
#
# Default: "warn"
# log-level = "warn";

# Set the log file.
# If *--log-file* is never specified, logs will be written to stderr.
# Otherwise, logs will to written to the given file, though some of the early
# logs might still be written to the stderr.
# When setting this option from the config file, it is recommended to use an absolute path.
#
# log-file = "/path/to/your/log/file"

# Write process ID to a file.
# write-pid-path = "/path/to/your/log/file"
# Rule-based per-window options.
#
# See WINDOW RULES section in the man page for how these work.
rules: ({
  match = "focused";
}, {
  match = "focused";
}, {
  match = "class_g = 'i3lock'";
  shader = "/home/kz87/Code/picom-shaders/3DCamera/lock.glsl";
}, {
  match = "class_g = 'Brave-browser' || "
          "class_g = 'vlc'           || "
          "class_g = 'Pqiv'          || "
          "class_g = 'i3lock'        || "
          "class_g = 'mpv'           || "
          "class_g = 'sm64ex'        || "
          "class_g = 'Discord'       || "
          "class_g = 'love'          || "
          "class_g = 'MPlayer'       || "
          "name   *= 'Eww'";
  unredir = false;
}, {
  match = "class_g = 'Eww'"
          "class_g = 'yawns'";
  full-shadow = true;
}, {
  match = "window_type = 'unknown'       ||"
          "window_type = 'desktop'       ||"
          "window_type = 'toolbar'       ||"
          "window_type = 'menu'          ||"
          "window_type = 'utility'       ||"
          "window_type = 'splash'        ||"
          "window_type = 'dialog'        ||"
          "window_type = 'dropdown_menu' ||"
          "window_type = 'popup_menu'    ||"
          "window_type = 'tooltip'       ||"
          "window_type = 'toolbar'       ||"
          "window_type = 'combo'         ||"
          "window_type = 'dnd'           ||"
          "class_g     = 'Pqiv'          ||"
          "class_g     = 'GLWall'        ||"
          "class_g     = 'mpv'           ||"
          "class_g     = 'eww-music'     ||"
          "class_g     = 'eww-calendar'  ||"
          "class_g     = 'Rofi'          ||"
          "class_g     = 'i3lock'        ||"
          "fullscreen";
  corner-radius = 0; 
}, {
  match = "window_type = 'unknown'       ||"
          "window_type = 'desktop'       ||"
          "window_type = 'toolbar'       ||"
          "window_type = 'notification'       ||"
          "window_type = 'menu'          ||"
          "window_type = 'utility'       ||"
          "window_type = 'splash'        ||"
          "window_type = 'dialog'        ||"
          "window_type = 'dropdown_menu' ||"
          "window_type = 'popup_menu'    ||"
          "window_type = 'tooltip'       ||"
          "window_type = 'toolbar'       ||"
          "window_type = 'combo'         ||"
          "window_type = 'dnd'           ||"
          "class_g     = 'Pqiv'          ||"
          "class_g     = 'GLWall'        ||"
          "class_g     = 'mpv'           ||"
          "class_g     = 'eww-music'     ||"
          "class_g     = 'eww-calendar'  ||"
          "class_g     = 'Rofi'          ||";
  blur-background = false 
}, {
  match = "window_type = 'tooltip'      ||"
          "window_type = 'dnd'          ||"
          "window_type = 'notification' ||"
          "class_g = 'Rofi'             ||"
          "window_type = 'dock'";
  full-shadow = true;
}, {
  match = "class_g = 'kitty'";
  full-shadow = true;
}, {
  match = "class_g = 'i3lock'";
  animations = ({
      triggers = ["open", "show"];
      anim-duration = 0.2;
      offset-y = {
        curve = "cubic-bezier(0, 1, 1, 1)";
        start = "- window-height";
        end = 0;
        duration = "anim-duration";
        };
      opacity = {
        end = 1;
        start = 1;
        duration = "anim-duration";
      };
      shadow-offset-y = "offset-y";
      shadow-opacity = "opacity";
      }, {
      triggers = ["close", "hide"];
      anim-duration = 0.4;
      offset-y = {
        curve = "cubic-bezier(1, 0, 1, 1)";
        start = 0;
        end = "- window-height";
        duration = "anim-duration";
        };
      shadow-offset-y = "offset-y";
      opacity = {
        end = 1;
        start = 1;
        duration = "anim-duration";
      };
      shadow-opacity = "opacity";
  });
#}, {
  match = "window_type = 'notification'";
  animations = ({
      triggers = ["close", "hide"];
      preset = "disappear";
      scale = 1.4;
      duration = 0.2;
  });
}, {
#  match = "window_type = 'notification'";
#  animations = ({
#      triggers = ["close", "hide"];
#  });
}, {
  match = "class_g     = 'eww-music'     ||"
          "class_g     = 'eww-calendar'  ||"
          "class_g = 'Rofi'";
  animations = ({
      triggers = ["open", "show"];
      preset = "slide-in";
      direction = "up";
      duration = 0.1;
      }, {
      triggers = ["close", "hide"];
      preset = "slide-out";
      direction = "up";
      duration = 0.1;
  });
}, {
  match = "window_type = 'popup_menu'   ||"
          "window_type = 'tooltip'      ||"
          "window_type = 'dropdown_menu'";
  animations = ({
      triggers = ["open", "show"];
      preset = "slide-in";
      direction = "up";
      duration = 0.1;
      }, {
      triggers = ["close", "hide"];
      preset = "slide-out";
      direction = "up";
      duration = 0.1;
  });
  opacity = 0.8;
})

animations = ({
  # Pop in
  # Options
  duration = 0.2;
  initial-scale = 0.8;
  
  triggers = ["open", "show"];
  anim-curve = {
        curve = "cubic-bezier(0, 1.5, 1, 1)";
        start = 0;
        end = 1;
        duration = "duration";
        }
  scale-x = "anim-curve * (1 - initial-scale) + initial-scale";
  scale-y = "anim-curve * (1 - initial-scale) + initial-scale";
  offset-x = "(1 - scale-x) / 2 * window-width" 
  offset-y = "(1 - scale-y) / 2 * window-height" 

  opacity = "anim-curve";
  shadow-offset-x = "offset-x";
  shadow-offset-y = "offset-y";
  shadow-scale-x = "scale-x";
  shadow-scale-y = "scale-y";
}, {
  # Pop-out
  # Options
  duration = 0.1;
  initial-scale = 0.8;

  triggers = ["hide"];
  anim-curve = {
        curve = "cubic-bezier(0, 0, 1, -0.5)";
        start = 1;
        end = 0;
        duration = "duration";
        }
  scale-x = "anim-curve * (1 - initial-scale) + initial-scale";
  scale-y = "anim-curve * (1 - initial-scale) + initial-scale";
  offset-x = "(1-scale-x) / 2 * window-width" 
  offset-y = "(1-scale-y) / 2 * window-height" 

  opacity = "anim-curve";
  shadow-offset-x = "offset-x";
  shadow-offset-y = "offset-y";
  shadow-scale-x = "scale-x";
  shadow-scale-y = "scale-y";
}, {
  triggers = ["close"];
  preset = "disappear";
  scale = 1.4;
  duration = 0.2;
}, {
  triggers = ["geometry"];
  duration = 0.2;
      scale-x = {
        curve = "cubic-bezier(0, 1, 1, 1)";
        duration = "duration";
        start = "window-width-before / window-width";
        end = 1;
    };
    scale-y = {
        curve = "cubic-bezier(0, 1, 1, 1)";
        duration = "duration";
        start = "window-height-before / window-height";
        end = 1;
    };
    shadow-scale-x = "scale-x";
    shadow-scale-y = "scale-y";
    offset-x = {
        curve = "cubic-bezier(0, 1, 1, 1)";
        duration = "duration";
        start = "window-x-before - window-x";
        end = 0;
    };
    offset-y = {
        curve = "cubic-bezier(0, 1, 1, 1)";
        duration = "duration";
        start = "window-y-before - window-y";
        end = 0;
    };
    shadow-offset-x = "offset-x";
    shadow-offset-y = "offset-y";
})

blur:
{
  method = "gaussian";
  size = 24;
  deviation = 5.0;
};

# `@include` directive can be used to include additional configuration files.
# Relative paths are search either in the parent of this configuration file
# (when the configuration is loaded through a symlink, the symlink will be
# resolved first). Or in `$XDG_CONFIG_HOME/picom/include`.
#
# @include "extra.conf"
